# Stubs for jira.client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import logging
from jira.resources import Status
from requests.auth import AuthBase
from typing import Any, Dict, Optional

class NullHandler(logging.Handler):
    def emit(self, record: Any) -> None: ...

def translate_resource_args(func: Any): ...

class ResultList(list):
    startAt: Any = ...
    maxResults: Any = ...
    isLast: Any = ...
    total: Any = ...
    iterable: Any = ...
    current: Any = ...
    def __init__(self, iterable: Optional[Any] = ..., _startAt: int = ..., _maxResults: int = ..., _total: int = ..., _isLast: Optional[Any] = ...) -> None: ...
    def __next__(self): ...
    next: Any = ...

class QshGenerator:
    context_path: Any = ...
    def __init__(self, context_path: Any) -> None: ...
    def __call__(self, req: Any): ...

class JiraCookieAuth(AuthBase):
    def __init__(self, session: Any, _get_session: Any, auth: Any) -> None: ...
    def handle_401(self, response: Any, **kwargs: Any): ...
    def process_original_request(self, original_request: Any): ...
    def update_cookies(self, original_request: Any) -> None: ...
    def init_session(self) -> None: ...
    def __call__(self, request: Any): ...
    def send_request(self, request: Any): ...
    @property
    def cookies(self): ...
    def start_session(self) -> None: ...

class JIRA:
    DEFAULT_OPTIONS: Dict[str, Any] = ...
    checked_version: bool = ...
    JIRA_BASE_URL: str = ...
    AGILE_BASE_URL: Any = ...
    sys_version_info: Any = ...
    logging: Any = ...
    deploymentType: Any = ...
    def __init__(self, server: Optional[Any] = ..., options: Optional[Any] = ..., basic_auth: Optional[Any] = ..., oauth: Optional[Any] = ..., jwt: Optional[Any] = ..., kerberos: bool = ..., kerberos_options: Optional[Any] = ..., validate: bool = ..., get_server_info: bool = ..., async_: bool = ..., async_workers: int = ..., logging: bool = ..., max_retries: int = ..., proxies: Optional[Any] = ..., timeout: Optional[Any] = ..., auth: Optional[Any] = ...) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    def client_info(self): ...
    def find(self, resource_format: Any, ids: Optional[Any] = ...): ...
    def async_do(self, size: int = ...) -> None: ...
    def application_properties(self, key: Optional[Any] = ...): ...
    def set_application_property(self, key: Any, value: Any): ...
    def applicationlinks(self, cached: bool = ...): ...
    def attachment(self, id: Any): ...
    def attachment_meta(self): ...
    def add_attachment(self, issue: Any, attachment: Any, filename: Optional[Any] = ...): ...
    def delete_attachment(self, id: Any): ...
    def component(self, id: Any): ...
    def create_component(self, name: Any, project: Any, description: Optional[Any] = ..., leadUserName: Optional[Any] = ..., assigneeType: Optional[Any] = ..., isAssigneeTypeValid: bool = ...): ...
    def component_count_related_issues(self, id: Any): ...
    def delete_component(self, id: Any): ...
    def custom_field_option(self, id: Any): ...
    def dashboards(self, filter: Optional[Any] = ..., startAt: int = ..., maxResults: int = ...): ...
    def dashboard(self, id: Any): ...
    def fields(self): ...
    def filter(self, id: Any): ...
    def favourite_filters(self): ...
    def create_filter(self, name: Optional[Any] = ..., description: Optional[Any] = ..., jql: Optional[Any] = ..., favourite: Optional[Any] = ...): ...
    def update_filter(self, filter_id: Any, name: Optional[Any] = ..., description: Optional[Any] = ..., jql: Optional[Any] = ..., favourite: Optional[Any] = ...): ...
    def groups(self, query: Optional[Any] = ..., exclude: Optional[Any] = ..., maxResults: int = ...): ...
    def group_members(self, group: Any): ...
    def add_group(self, groupname: Any): ...
    def remove_group(self, groupname: Any): ...
    def issue(self, id: Any, fields: Optional[Any] = ..., expand: Optional[Any] = ...): ...
    def create_issue(self, fields: Optional[Any] = ..., prefetch: bool = ..., **fieldargs: Any): ...
    def create_issues(self, field_list: Any, prefetch: bool = ...): ...
    def supports_service_desk(self): ...
    def create_customer(self, email: Any, displayName: Any): ...
    def service_desks(self): ...
    def service_desk(self, id: Any): ...
    def create_customer_request(self, fields: Optional[Any] = ..., prefetch: bool = ..., **fieldargs: Any): ...
    def createmeta(self, projectKeys: Optional[Any] = ..., projectIds: Any = ..., issuetypeIds: Optional[Any] = ..., issuetypeNames: Optional[Any] = ..., expand: Optional[Any] = ...): ...
    def assign_issue(self, issue: Any, assignee: Any): ...
    def comments(self, issue: Any): ...
    def comment(self, issue: Any, comment: Any): ...
    def add_comment(self, issue: Any, body: Any, visibility: Optional[Any] = ..., is_internal: bool = ...): ...
    def editmeta(self, issue: Any): ...
    def remote_links(self, issue: Any): ...
    def remote_link(self, issue: Any, id: Any): ...
    def add_remote_link(self, issue: Any, destination: Any, globalId: Optional[Any] = ..., application: Optional[Any] = ..., relationship: Optional[Any] = ...): ...
    def add_simple_link(self, issue: Any, object: Any): ...
    def transitions(self, issue: Any, id: Optional[Any] = ..., expand: Optional[Any] = ...): ...
    def find_transitionid_by_name(self, issue: Any, transition_name: Any): ...
    def transition_issue(self, issue: Any, transition: Any, fields: Optional[Any] = ..., comment: Optional[Any] = ..., worklog: Optional[Any] = ..., **fieldargs: Any): ...
    def votes(self, issue: Any): ...
    def add_vote(self, issue: Any): ...
    def remove_vote(self, issue: Any) -> None: ...
    def watchers(self, issue: Any): ...
    def add_watcher(self, issue: Any, watcher: Any) -> None: ...
    def remove_watcher(self, issue: Any, watcher: Any): ...
    def worklogs(self, issue: Any): ...
    def worklog(self, issue: Any, id: Any): ...
    def add_worklog(self, issue: Any, timeSpent: Optional[Any] = ..., timeSpentSeconds: Optional[Any] = ..., adjustEstimate: Optional[Any] = ..., newEstimate: Optional[Any] = ..., reduceBy: Optional[Any] = ..., comment: Optional[Any] = ..., started: Optional[Any] = ..., user: Optional[Any] = ...): ...
    def create_issue_link(self, type: Any, inwardIssue: Any, outwardIssue: Any, comment: Optional[Any] = ...): ...
    def delete_issue_link(self, id: Any): ...
    def issue_link(self, id: Any): ...
    def issue_link_types(self): ...
    def issue_link_type(self, id: Any): ...
    def issue_types(self): ...
    def issue_type(self, id: Any): ...
    def issue_type_by_name(self, name: Any): ...
    def request_types(self, service_desk: Any): ...
    def request_type_by_name(self, service_desk: Any, name: Any): ...
    def my_permissions(self, projectKey: Optional[Any] = ..., projectId: Optional[Any] = ..., issueKey: Optional[Any] = ..., issueId: Optional[Any] = ...): ...
    def priorities(self): ...
    def priority(self, id: Any): ...
    def projects(self): ...
    def project(self, id: Any): ...
    def project_avatars(self, project: Any): ...
    def create_temp_project_avatar(self, project: Any, filename: Any, size: Any, avatar_img: Any, contentType: Optional[Any] = ..., auto_confirm: bool = ...): ...
    def confirm_project_avatar(self, project: Any, cropping_properties: Any): ...
    def set_project_avatar(self, project: Any, avatar: Any) -> None: ...
    def delete_project_avatar(self, project: Any, avatar: Any): ...
    def project_components(self, project: Any): ...
    def project_versions(self, project: Any): ...
    def project_roles(self, project: Any): ...
    def project_role(self, project: Any, id: Any): ...
    def resolutions(self): ...
    def resolution(self, id: Any): ...
    def search_issues(self, jql_str: Any, startAt: int = ..., maxResults: int = ..., validate_query: bool = ..., fields: Optional[Any] = ..., expand: Optional[Any] = ..., json_result: Optional[Any] = ...): ...
    def security_level(self, id: Any): ...
    def server_info(self) -> Dict[str, Any]: ...
    def myself(self) -> Dict[str, Any]: ...
    def statuses(self): ...
    def status(self, id: str) -> Status: ...
    def statuscategories(self): ...
    def statuscategory(self, id: Any): ...
    def user(self, id: Any, expand: Optional[Any] = ...): ...
    def search_assignable_users_for_projects(self, username: Any, projectKeys: Any, startAt: int = ..., maxResults: int = ...): ...
    def search_assignable_users_for_issues(self, username: Any, project: Optional[Any] = ..., issueKey: Optional[Any] = ..., expand: Optional[Any] = ..., startAt: int = ..., maxResults: int = ...): ...
    def user_avatars(self, username: Any): ...
    def create_temp_user_avatar(self, user: Any, filename: Any, size: Any, avatar_img: Any, contentType: Optional[Any] = ..., auto_confirm: bool = ...): ...
    def confirm_user_avatar(self, user: Any, cropping_properties: Any): ...
    def set_user_avatar(self, username: Any, avatar: Any) -> None: ...
    def delete_user_avatar(self, username: Any, avatar: Any): ...
    def search_users(self, user: Any, startAt: int = ..., maxResults: int = ..., includeActive: bool = ..., includeInactive: bool = ...): ...
    def search_allowed_users_for_issue(self, user: Any, issueKey: Optional[Any] = ..., projectKey: Optional[Any] = ..., startAt: int = ..., maxResults: int = ...): ...
    def create_version(self, name: Any, project: Any, description: Optional[Any] = ..., releaseDate: Optional[Any] = ..., startDate: Optional[Any] = ..., archived: bool = ..., released: bool = ...): ...
    def move_version(self, id: Any, after: Optional[Any] = ..., position: Optional[Any] = ...): ...
    def version(self, id: Any, expand: Optional[Any] = ...): ...
    def version_count_related_issues(self, id: Any): ...
    def version_count_unresolved_issues(self, id: Any): ...
    def session(self, auth: Optional[Any] = ...): ...
    def kill_session(self): ...
    def kill_websudo(self): ...
    def rename_user(self, old_user: Any, new_user: Any) -> None: ...
    def delete_user(self, username: Any): ...
    authCookie: Any = ...
    def deactivate_user(self, username: Any): ...
    def reindex(self, force: bool = ..., background: bool = ...): ...
    def backup(self, filename: str = ..., attachments: bool = ...): ...
    def backup_progress(self): ...
    def backup_complete(self): ...
    def backup_download(self, filename: Optional[Any] = ...) -> None: ...
    def current_user(self): ...
    def delete_project(self, pid: Any): ...
    def templates(self): ...
    def create_project(self, key: Any, name: Optional[Any] = ..., assignee: Optional[Any] = ..., type: str = ..., template_name: Optional[Any] = ...): ...
    def add_user(self, username: Any, email: Any, directoryId: int = ..., password: Optional[Any] = ..., fullname: Optional[Any] = ..., notify: bool = ..., active: bool = ..., ignore_existing: bool = ..., application_keys: Optional[Any] = ...): ...
    def add_user_to_group(self, username: Any, group: Any): ...
    def remove_user_from_group(self, username: Any, groupname: Any): ...
    def get_igrid(self, issueid: Any, customfield: Any, schemeid: Any): ...
    def boards(self, startAt: int = ..., maxResults: int = ..., type: Optional[Any] = ..., name: Optional[Any] = ..., projectKeyOrID: Optional[Any] = ...): ...
    def sprints(self, board_id: Any, extended: bool = ..., startAt: int = ..., maxResults: int = ..., state: Optional[Any] = ...): ...
    def sprints_by_name(self, id: Any, extended: bool = ...): ...
    def update_sprint(self, id: Any, name: Optional[Any] = ..., startDate: Optional[Any] = ..., endDate: Optional[Any] = ..., state: Optional[Any] = ...): ...
    def incompletedIssuesEstimateSum(self, board_id: Any, sprint_id: Any): ...
    def removed_issues(self, board_id: Any, sprint_id: Any): ...
    def removedIssuesEstimateSum(self, board_id: Any, sprint_id: Any): ...
    def sprint_info(self, board_id: Any, sprint_id: Any): ...
    def sprint(self, id: Any): ...
    def delete_board(self, id: Any) -> None: ...
    def create_board(self, name: Any, project_ids: Any, preset: str = ..., location_type: str = ..., location_id: Optional[Any] = ...): ...
    def create_sprint(self, name: Any, board_id: Any, startDate: Optional[Any] = ..., endDate: Optional[Any] = ...): ...
    def add_issues_to_sprint(self, sprint_id: Any, issue_keys: Any): ...
    def add_issues_to_epic(self, epic_id: Any, issue_keys: Any, ignore_epics: bool = ...): ...
    def rank(self, issue: Any, next_issue: Any): ...
    def move_to_backlog(self, issue_keys: Any): ...

class GreenHopper(JIRA):
    def __init__(self, options: Optional[Any] = ..., basic_auth: Optional[Any] = ..., oauth: Optional[Any] = ..., async_: Optional[Any] = ...) -> None: ...
