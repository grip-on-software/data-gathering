# Stubs for git.objects.tree (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import git.diff as diff
from . import util
from .base import IndexObject
from git.objects.blob import Blob
from git.objects.submodule.base import Submodule
from typing import Any, Optional, Union

class TreeModifier:
    def __init__(self, cache: Any) -> None: ...
    def set_done(self): ...
    def add(self, sha: Any, mode: Any, name: Any, force: bool = ...): ...
    def add_unchecked(self, binsha: Any, mode: Any, name: Any) -> None: ...
    def __delitem__(self, name: Any) -> None: ...

class Tree(IndexObject, diff.Diffable, util.Traversable, util.Serializable):
    type: str = ...
    commit_id: int = ...
    blob_id: int = ...
    symlink_id: int = ...
    tree_id: int = ...
    def __init__(self, repo: Any, binsha: Any, mode: Any = ..., path: Optional[Any] = ...) -> None: ...
    def join(self, file: Any) -> Union[Blob, 'Tree', Submodule]: ...
    def __div__(self, file: Any): ...
    def __truediv__(self, file: Any): ...
    @property
    def trees(self): ...
    @property
    def blobs(self): ...
    @property
    def cache(self): ...
    def traverse(self, predicate: Any = ..., prune: Any = ..., depth: int = ..., branch_first: bool = ..., visit_once: bool = ..., ignore_self: int = ..., **kwargs: Any): ...
    def __getslice__(self, i: Any, j: Any): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __getitem__(self, item: Any): ...
    def __contains__(self, item: Any): ...
    def __reversed__(self): ...
