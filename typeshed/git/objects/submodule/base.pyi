# Stubs for git.objects.submodule.base (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from git.objects.base import IndexObject
from git.objects.util import Traversable
from git.util import Iterable, RemoteProgress
from typing import Any, Optional

class UpdateProgress(RemoteProgress):
    CLONE: Any = ...
    FETCH: Any = ...
    UPDWKTREE: Any = ...

class Submodule(IndexObject, Iterable, Traversable):
    k_modules_file: str = ...
    k_head_option: str = ...
    k_head_default: str = ...
    k_default_mode: Any = ...
    type: str = ...
    size: int = ...
    def __init__(self, repo: Any, binsha: Any, mode: Optional[Any] = ..., path: Optional[Any] = ..., name: Optional[Any] = ..., parent_commit: Optional[Any] = ..., url: Optional[Any] = ..., branch_path: Optional[Any] = ...) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    @classmethod
    def add(cls, repo: Any, name: Any, path: Any, url: Optional[Any] = ..., branch: Optional[Any] = ..., no_checkout: bool = ...): ...
    def update(self, recursive: bool = ..., init: bool = ..., to_latest_revision: bool = ..., progress: Optional[Any] = ..., dry_run: bool = ..., force: bool = ..., keep_going: bool = ..., **kwargs: Any): ...
    path: Any = ...
    def move(self, module_path: Any, configuration: bool = ..., module: bool = ...): ...
    def remove(self, module: bool = ..., force: bool = ..., configuration: bool = ..., dry_run: bool = ...): ...
    binsha: Any = ...
    def set_parent_commit(self, commit: Any, check: bool = ...): ...
    def config_writer(self, index: Optional[Any] = ..., write: bool = ...): ...
    def rename(self, new_name: Any): ...
    def module(self): ...
    def module_exists(self): ...
    def exists(self): ...
    @property
    def branch(self): ...
    @property
    def branch_path(self): ...
    @property
    def branch_name(self): ...
    @property
    def url(self): ...
    @property
    def parent_commit(self): ...
    @property
    def name(self): ...
    def config_reader(self): ...
    def children(self): ...
    @classmethod
    def iter_items(cls, repo: Any, *args: Any, **kwargs: Any) -> None: ...
