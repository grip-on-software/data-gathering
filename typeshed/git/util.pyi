# Stubs for git.util (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import logging
from typing import Any, Dict, Optional
from gitdb.util import LazyMixin as LazyMixin

HIDE_WINDOWS_KNOWN_ERRORS: Any

def unbare_repo(func: Any): ...
def rmtree(path: Any): ...
def stream_copy(source: Any, destination: Any, chunk_size: Any = ...): ...
def join_path(a: Any, *p: Any): ...
def to_native_path_windows(path: Any): ...
def to_native_path_linux(path: Any): ...
to_native_path = to_native_path_windows
to_native_path = to_native_path_linux

def join_path_native(a: Any, *p: Any): ...
def assure_directory_exists(path: Any, is_file: bool = ...): ...
def get_user_id(): ...

class RemoteProgress:
    BEGIN: Any = ...
    END: Any = ...
    COUNTING: Any = ...
    COMPRESSING: Any = ...
    WRITING: Any = ...
    RECEIVING: Any = ...
    RESOLVING: Any = ...
    FINDING_SOURCES: Any = ...
    CHECKING_OUT: Any = ...
    STAGE_MASK: Any = ...
    OP_MASK: Any = ...
    DONE_TOKEN: str = ...
    TOKEN_SEPARATOR: str = ...
    re_op_absolute: Any = ...
    re_op_relative: Any = ...
    error_lines: Any = ...
    other_lines: Any = ...
    def __init__(self) -> None: ...
    def new_message_handler(self): ...
    def line_dropped(self, line: Any) -> None: ...
    def update(self, op_code: Any, cur_count: Any, max_count: Optional[Any] = ..., message: str = ...) -> None: ...

class CallableRemoteProgress(RemoteProgress):
    def __init__(self, fn: Any) -> None: ...
    def update(self, *args: Any, **kwargs: Any) -> None: ...

class Actor:
    name_only_regex: Any = ...
    name_email_regex: Any = ...
    env_author_name: str = ...
    env_author_email: str = ...
    env_committer_name: str = ...
    env_committer_email: str = ...
    conf_name: str = ...
    conf_email: str = ...
    name: str = ...
    email: str = ...
    def __init__(self, name: Any, email: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    @classmethod
    def committer(cls, config_reader: Optional[Any] = ...): ...
    @classmethod
    def author(cls, config_reader: Optional[Any] = ...): ...

class Stats:
    total: Dict[str, int] = ...
    files: Dict[str, Dict[str, int]] = ...
    def __init__(self, total: Any, files: Any) -> None: ...

class IndexFileSHA1Writer:
    f: Any = ...
    sha1: Any = ...
    def __init__(self, f: Any) -> None: ...
    def write(self, data: Any): ...
    def write_sha(self): ...
    def close(self): ...
    def tell(self): ...

class LockFile:
    def __init__(self, file_path: Any) -> None: ...
    def __del__(self) -> None: ...

class BlockingLockFile(LockFile):
    def __init__(self, file_path: Any, check_interval_s: float = ..., max_block_time_s: Any = ...) -> None: ...

class IterableList(list):
    def __new__(cls, id_attr: Any, prefix: str = ...): ...
    def __init__(self, id_attr: Any, prefix: str = ...) -> None: ...
    def __contains__(self, attr: Any): ...
    def __getattr__(self, attr: Any): ...
    def __getitem__(self, index: Any): ...
    def __delitem__(self, index: Any) -> None: ...

class Iterable:
    @classmethod
    def list_items(cls, repo: Any, *args: Any, **kwargs: Any): ...
    @classmethod
    def iter_items(cls, repo: Any, *args: Any, **kwargs: Any) -> None: ...

class NullHandler(logging.Handler):
    def emit(self, record: Any) -> None: ...
