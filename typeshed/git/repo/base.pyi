# Stubs for git.repo.base (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from git.cmd import Git
from git.config import GitConfigParser
from git.objects.commit import Commit
from git.util import IterableList
from git.objects.submodule.base import Submodule
from git.refs.head import HEAD, Head
from git.refs.reference import Reference
from git.refs.tag import TagReference
from git.remote import Remote
from collections import namedtuple
from typing import Any, Iterator, Optional, Sequence, Union

BlameEntry = namedtuple('BlameEntry', ['commit', 'linenos', 'orig_path', 'orig_linenos'])

class Repo:
    DAEMON_EXPORT_FILE: str = ...
    git: Git = ...
    working_dir: Any = ...
    git_dir: str = ...
    re_whitespace: Any = ...
    re_hexsha_only: Any = ...
    re_hexsha_shortened: Any = ...
    re_author_committer_start: Any = ...
    re_tab_full_line: Any = ...
    config_level: Any = ...
    GitCommandWrapperType: Any = ...
    odb: Any = ...
    def __init__(self, path: Optional[Any] = ..., odbt: Any = ..., search_parent_directories: bool = ..., expand_vars: bool = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    def __eq__(self, rhs: Any): ...
    def __ne__(self, rhs: Any): ...
    def __hash__(self): ...
    description: Any = ...
    @property
    def working_tree_dir(self): ...
    @property
    def common_dir(self): ...
    @property
    def bare(self): ...
    @property
    def heads(self) -> IterableList[Head]: ...
    @property
    def references(self) -> IterableList[Reference]: ...
    refs: IterableList[Reference] = ...
    branches: IterableList[Head] = ...
    @property
    def index(self): ...
    @property
    def head(self) -> HEAD: ...
    @property
    def remotes(self) -> IterableList[Remote]: ...
    def remote(self, name: str = ...): ...
    @property
    def submodules(self) -> IterableList[Submodule]: ...
    def submodule(self, name: Any): ...
    def create_submodule(self, *args: Any, **kwargs: Any): ...
    def iter_submodules(self, *args: Any, **kwargs: Any): ...
    def submodule_update(self, *args: Any, **kwargs: Any): ...
    @property
    def tags(self) -> IterableList[TagReference]: ...
    def tag(self, path: Any): ...
    def create_head(self, path: Any, commit: str = ..., force: bool = ..., logmsg: Optional[Any] = ...): ...
    def delete_head(self, *heads: Any, **kwargs: Any): ...
    def create_tag(self, path: Any, ref: str = ..., message: Optional[Any] = ..., force: bool = ..., **kwargs: Any): ...
    def delete_tag(self, *tags: Any): ...
    def create_remote(self, name: Any, url: Any, **kwargs: Any): ...
    def delete_remote(self, remote: Any): ...
    def config_reader(self, config_level: Optional[Any] = ...) -> GitConfigParser: ...
    def config_writer(self, config_level: str = ...) -> GitConfigParser: ...
    def commit(self, rev: Optional[Any] = ...) -> Commit: ...
    def iter_trees(self, *args: Any, **kwargs: Any) -> Iterator: ...
    def tree(self, rev: Optional[Any] = ...): ...
    def iter_commits(self, rev: Optional[Any] = ..., paths: Union[str, Sequence[str]] = ..., **kwargs: Any) -> Iterator[Commit]: ...
    def merge_base(self, *rev: Any, **kwargs: Any): ...
    def is_ancestor(self, ancestor_rev: Any, rev: Any): ...
    daemon_export: Any = ...
    alternates: Any = ...
    def is_dirty(self, index: bool = ..., working_tree: bool = ..., untracked_files: bool = ..., submodules: bool = ..., path: Optional[Any] = ...): ...
    @property
    def untracked_files(self): ...
    @property
    def active_branch(self): ...
    def blame_incremental(self, rev: Any, file: Any, **kwargs: Any) -> None: ...
    def blame(self, rev: Any, file: Any, incremental: bool = ..., **kwargs: Any): ...
    @classmethod
    def init(cls, path: Optional[Any] = ..., mkdir: bool = ..., odbt: Any = ..., expand_vars: bool = ..., **kwargs: Any): ...
    def clone(self, path: Any, progress: Optional[Any] = ..., **kwargs: Any): ...
    @classmethod
    def clone_from(cls, url: Any, to_path: Any, progress: Optional[Any] = ..., env: Optional[Any] = ..., **kwargs: Any) -> 'Repo': ...
    def archive(self, ostream: Any, treeish: Optional[Any] = ..., prefix: Optional[Any] = ..., **kwargs: Any): ...
    def has_separate_working_tree(self): ...
    def rev_parse(self, rev: Any) -> Commit: ...
