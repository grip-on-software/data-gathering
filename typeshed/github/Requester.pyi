# Stubs for github.Requester (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

atLeastPython3: Any

class RequestsResponse:
    status: Any = ...
    headers: Any = ...
    text: Any = ...
    def __init__(self, r: Any) -> None: ...
    def getheaders(self): ...
    def read(self): ...

class HTTPSRequestsConnectionClass:
    port: Any = ...
    host: Any = ...
    protocol: str = ...
    timeout: Any = ...
    verify: Any = ...
    session: Any = ...
    retry: Any = ...
    adapter: Any = ...
    def __init__(self, host: Any, port: Optional[Any] = ..., strict: bool = ..., timeout: Optional[Any] = ..., retry: Optional[Any] = ..., **kwargs: Any) -> None: ...
    verb: Any = ...
    url: Any = ...
    input: Any = ...
    headers: Any = ...
    def request(self, verb: Any, url: Any, input: Any, headers: Any) -> None: ...
    def getresponse(self): ...
    def close(self) -> None: ...

class HTTPRequestsConnectionClass:
    port: Any = ...
    host: Any = ...
    protocol: str = ...
    timeout: Any = ...
    verify: Any = ...
    session: Any = ...
    retry: Any = ...
    adapter: Any = ...
    def __init__(self, host: Any, port: Optional[Any] = ..., strict: bool = ..., timeout: Optional[Any] = ..., retry: Optional[Any] = ..., **kwargs: Any) -> None: ...
    verb: Any = ...
    url: Any = ...
    input: Any = ...
    headers: Any = ...
    def request(self, verb: Any, url: Any, input: Any, headers: Any) -> None: ...
    def getresponse(self): ...
    def close(self) -> None: ...

class Requester:
    @classmethod
    def injectConnectionClasses(cls, httpConnectionClass: Any, httpsConnectionClass: Any) -> None: ...
    @classmethod
    def resetConnectionClasses(cls) -> None: ...
    @classmethod
    def setDebugFlag(cls, flag: Any) -> None: ...
    @classmethod
    def setOnCheckMe(cls, onCheckMe: Any) -> None: ...
    DEBUG_FLAG: bool = ...
    DEBUG_FRAME_BUFFER_SIZE: int = ...
    DEBUG_HEADER_KEY: str = ...
    ON_CHECK_ME: Any = ...
    def NEW_DEBUG_FRAME(self, requestHeader: Any) -> None: ...
    def DEBUG_ON_RESPONSE(self, statusCode: Any, responseHeader: Any, data: Any) -> None: ...
    def check_me(self, obj: Any) -> None: ...
    rate_limiting: Any = ...
    rate_limiting_resettime: int = ...
    FIX_REPO_GET_GIT_REF: bool = ...
    per_page: Any = ...
    oauth_scopes: Any = ...
    def __init__(self, login_or_token: Any, password: Any, jwt: Any, base_url: Any, timeout: Any, client_id: Any, client_secret: Any, user_agent: Any, per_page: Any, api_preview: Any, verify: Any, retry: Any) -> None: ...
    def requestJsonAndCheck(self, verb: Any, url: Any, parameters: Optional[Any] = ..., headers: Optional[Any] = ..., input: Optional[Any] = ...): ...
    def requestMultipartAndCheck(self, verb: Any, url: Any, parameters: Optional[Any] = ..., headers: Optional[Any] = ..., input: Optional[Any] = ...): ...
    def requestBlobAndCheck(self, verb: Any, url: Any, parameters: Optional[Any] = ..., headers: Optional[Any] = ..., input: Optional[Any] = ...): ...
    def requestJson(self, verb: Any, url: Any, parameters: Optional[Any] = ..., headers: Optional[Any] = ..., input: Optional[Any] = ..., cnx: Optional[Any] = ...): ...
    def requestMultipart(self, verb: Any, url: Any, parameters: Optional[Any] = ..., headers: Optional[Any] = ..., input: Optional[Any] = ..., cnx: Optional[Any] = ...): ...
    def requestBlob(self, verb: Any, url: Any, parameters: Any = ..., headers: Any = ..., input: Optional[Any] = ..., cnx: Optional[Any] = ...): ...
