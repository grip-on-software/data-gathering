# Stubs for github.Repository (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from datetime import datetime
from .CommitComment import CommitComment
from .Issue import Issue
from .Label import Label
from .Milestone import Milestone
from .NamedUser import NamedUser
from .PaginatedList import PaginatedList
from .PullRequest import PullRequest
import github.View
from typing import Any, List, Optional, Union

atLeastPython3: Any

class Repository(github.GithubObject.CompletableGithubObject):
    @property
    def allow_merge_commit(self): ...
    @property
    def allow_rebase_merge(self): ...
    @property
    def allow_squash_merge(self): ...
    @property
    def archived(self): ...
    @property
    def archive_url(self): ...
    @property
    def assignees_url(self): ...
    @property
    def blobs_url(self): ...
    @property
    def branches_url(self): ...
    @property
    def clone_url(self) -> str: ...
    @property
    def collaborators_url(self): ...
    @property
    def comments_url(self): ...
    @property
    def commits_url(self): ...
    @property
    def compare_url(self): ...
    @property
    def contents_url(self): ...
    @property
    def contributors_url(self): ...
    @property
    def created_at(self) -> datetime: ...
    @property
    def default_branch(self): ...
    @property
    def description(self) -> Optional[str]: ...
    @property
    def downloads_url(self): ...
    @property
    def events_url(self): ...
    @property
    def fork(self) -> bool: ...
    @property
    def forks(self): ...
    @property
    def forks_count(self): ...
    @property
    def forks_url(self): ...
    @property
    def full_name(self): ...
    @property
    def git_commits_url(self): ...
    @property
    def git_refs_url(self): ...
    @property
    def git_tags_url(self): ...
    @property
    def git_url(self): ...
    @property
    def has_downloads(self): ...
    @property
    def has_issues(self): ...
    @property
    def has_projects(self): ...
    @property
    def has_wiki(self): ...
    @property
    def homepage(self): ...
    @property
    def hooks_url(self): ...
    @property
    def html_url(self): ...
    @property
    def id(self) -> int: ...
    @property
    def issue_comment_url(self): ...
    @property
    def issue_events_url(self): ...
    @property
    def issues_url(self): ...
    @property
    def keys_url(self): ...
    @property
    def labels_url(self): ...
    @property
    def language(self): ...
    @property
    def languages_url(self): ...
    @property
    def master_branch(self): ...
    @property
    def merges_url(self): ...
    @property
    def milestones_url(self): ...
    @property
    def mirror_url(self): ...
    @property
    def name(self) -> str: ...
    @property
    def network_count(self): ...
    @property
    def notifications_url(self): ...
    @property
    def open_issues(self): ...
    @property
    def open_issues_count(self): ...
    @property
    def organization(self): ...
    @property
    def owner(self): ...
    @property
    def parent(self): ...
    @property
    def permissions(self): ...
    @property
    def private(self) -> bool: ...
    @property
    def pulls_url(self) -> str: ...
    @property
    def pushed_at(self): ...
    @property
    def size(self): ...
    @property
    def source(self): ...
    @property
    def ssh_url(self): ...
    @property
    def stargazers_count(self) -> int: ...
    @property
    def stargazers_url(self): ...
    @property
    def statuses_url(self): ...
    @property
    def subscribers_url(self): ...
    @property
    def subscribers_count(self): ...
    @property
    def subscription_url(self): ...
    @property
    def svn_url(self): ...
    @property
    def tags_url(self): ...
    @property
    def teams_url(self): ...
    @property
    def topics(self): ...
    @property
    def trees_url(self): ...
    @property
    def updated_at(self) -> datetime: ...
    @property
    def url(self): ...
    @property
    def watchers(self): ...
    @property
    def watchers_count(self) -> int: ...
    def add_to_collaborators(self, collaborator: Any, permission: Any = ...): ...
    def get_collaborator_permission(self, collaborator: Any): ...
    def get_pending_invitations(self): ...
    def remove_invitation(self, invite_id: Any) -> None: ...
    def compare(self, base: Any, head: Any): ...
    def create_git_blob(self, content: Any, encoding: Any): ...
    def create_git_commit(self, message: Any, tree: Any, parents: Any, author: Any = ..., committer: Any = ...): ...
    def create_git_ref(self, ref: Any, sha: Any): ...
    def create_git_tag_and_release(self, tag: Any, tag_message: Any, release_name: Any, release_message: Any, object: Any, type: Any, tagger: Any = ..., draft: bool = ..., prerelease: bool = ...): ...
    def create_git_release(self, tag: Any, name: Any, message: Any, draft: bool = ..., prerelease: bool = ..., target_commitish: Any = ...): ...
    def create_git_tag(self, tag: Any, message: Any, object: Any, type: Any, tagger: Any = ...): ...
    def create_git_tree(self, tree: Any, base_tree: Any = ...): ...
    def create_hook(self, name: Any, config: Any, events: Any = ..., active: Any = ...): ...
    def create_issue(self, title: Any, body: Any = ..., assignee: Any = ..., milestone: Any = ..., labels: Any = ..., assignees: Any = ...): ...
    def create_key(self, title: Any, key: Any, read_only: bool = ...): ...
    def create_label(self, name: Any, color: Any, description: Any = ...): ...
    def create_milestone(self, title: Any, state: Any = ..., description: Any = ..., due_on: Any = ...): ...
    def create_project(self, name: Any, body: Any = ...): ...
    def create_pull(self, *args: Any, **kwds: Any): ...
    def create_source_import(self, vcs: Any, vcs_url: Any, vcs_username: Any = ..., vcs_password: Any = ...): ...
    def delete(self) -> None: ...
    def edit(self, name: Optional[Any] = ..., description: Any = ..., homepage: Any = ..., private: Any = ..., has_issues: Any = ..., has_projects: Any = ..., has_wiki: Any = ..., has_downloads: Any = ..., default_branch: Any = ..., allow_squash_merge: Any = ..., allow_merge_commit: Any = ..., allow_rebase_merge: Any = ..., archived: Any = ...) -> None: ...
    def get_archive_link(self, archive_format: Any, ref: Any = ...): ...
    def get_assignees(self): ...
    def get_branch(self, branch: Any): ...
    def get_branches(self): ...
    def get_collaborators(self, affiliation: Any = ...): ...
    def get_comment(self, id: Any): ...
    def get_comments(self) -> PaginatedList[CommitComment]: ...
    def get_commit(self, sha: Any): ...
    def get_commits(self, sha: Any = ..., path: Any = ..., since: Any = ..., until: Any = ..., author: Any = ...): ...
    def get_contents(self, path: Any, ref: Any = ...): ...
    def get_top_referrers(self): ...
    def get_top_paths(self): ...
    def get_views_traffic(self, per: Any = ...): ...
    def get_clones_traffic(self, per: Any = ...): ...
    def get_projects(self, state: Any = ...): ...
    def create_file(self, path: Any, message: Any, content: Any, branch: Any = ..., committer: Any = ..., author: Any = ...): ...
    def update_file(self, path: Any, message: Any, content: Any, sha: Any, branch: Any = ..., committer: Any = ..., author: Any = ...): ...
    def delete_file(self, path: Any, message: Any, sha: Any, branch: Any = ..., committer: Any = ..., author: Any = ...): ...
    def get_dir_contents(self, path: Any, ref: Any = ...): ...
    def get_contributors(self, anon: Any = ...): ...
    def get_download(self, id: Any): ...
    def get_downloads(self): ...
    def get_events(self): ...
    def get_forks(self): ...
    def get_git_blob(self, sha: Any): ...
    def get_git_commit(self, sha: Any): ...
    def get_git_ref(self, ref: Any): ...
    def get_git_refs(self): ...
    def get_git_tag(self, sha: Any): ...
    def get_git_tree(self, sha: Any, recursive: Any = ...): ...
    def get_hook(self, id: Any): ...
    def get_hooks(self): ...
    def get_issue(self, number: Any): ...
    def get_issues(self, milestone: Union[Milestone, str] = ..., state: str = ..., assignee: Union[str, NamedUser] = ..., mentioned: NamedUser = ..., labels: List[Label] = ..., sort: str = ..., direction: str = ..., since: datetime = ..., creator: Union[str, NamedUser] = ...) -> PaginatedList[Issue]: ...
    def get_issues_comments(self, sort: Any = ..., direction: Any = ..., since: Any = ...): ...
    def get_issues_event(self, id: Any): ...
    def get_issues_events(self): ...
    def get_key(self, id: Any): ...
    def get_keys(self): ...
    def get_label(self, name: Any): ...
    def get_labels(self): ...
    def get_languages(self): ...
    def get_license(self): ...
    def get_milestone(self, number: Any): ...
    def get_milestones(self, state: Any = ..., sort: Any = ..., direction: Any = ...): ...
    def get_network_events(self): ...
    def get_pull(self, number: Any): ...
    def get_pulls(self, state: str = ..., sort: str = ..., direction: str = ..., base: str = ..., head: str = ...) -> PaginatedList[PullRequest]: ...
    def get_pulls_comments(self, sort: Any = ..., direction: Any = ..., since: Any = ...): ...
    def get_pulls_review_comments(self, sort: Any = ..., direction: Any = ..., since: Any = ...): ...
    def get_readme(self, ref: Any = ...): ...
    def get_source_import(self): ...
    def get_stargazers(self): ...
    def get_stargazers_with_dates(self): ...
    def get_stats_contributors(self): ...
    def get_stats_commit_activity(self): ...
    def get_stats_code_frequency(self): ...
    def get_stats_participation(self): ...
    def get_stats_punch_card(self): ...
    def get_subscribers(self): ...
    def get_tags(self): ...
    def get_releases(self): ...
    def get_release(self, id: Any): ...
    def get_latest_release(self): ...
    def get_teams(self): ...
    def get_topics(self): ...
    def get_watchers(self): ...
    def has_in_assignees(self, assignee: Any): ...
    def has_in_collaborators(self, collaborator: Any): ...
    def legacy_search_issues(self, state: Any, keyword: Any): ...
    def mark_notifications_as_read(self, last_read_at: Any = ...) -> None: ...
    def merge(self, base: Any, head: Any, commit_message: Any = ...): ...
    def replace_topics(self, topics: Any) -> None: ...
    def remove_from_collaborators(self, collaborator: Any) -> None: ...
    def subscribe_to_hub(self, event: Any, callback: Any, secret: Any = ...): ...
    def unsubscribe_from_hub(self, event: Any, callback: Any): ...
    def get_release_asset(self, id: Any): ...
