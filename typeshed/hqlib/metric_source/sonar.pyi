# Stubs for hqlib.metric_source.sonar (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .. import metric_source
from ..typing import DateTime, Number
from typing import Any, Dict, List, Optional, Tuple, Union

def extract_branch_decorator(func: Any): ...

class Sonar(metric_source.TestReport):
    metric_source_name: str = ...
    suppression_rules: Any = ...
    def __init__(self, sonar_url: str, *args: Any, **kwargs: Any) -> None: ...
    def version_number(self) -> Optional[str]: ...
    def violation_sorts(self) -> List[Tuple]: ...
    def is_security_hotspots_available(self): ...

class Sonar6(Sonar):
    metric_source_name: str = ...
    def is_branch_name_included(self, product: str) -> bool: ...
    def maintainability_bugs(self, product: str, branch: str) -> int: ...
    def violations_type_severity(self, product: str, branch: str, violation_type: str, severity: str) -> Tuple[str, int, str]: ...
    def vulnerabilities(self, product: str, branch: str) -> int: ...
    def code_smells(self, product: str, branch: str) -> int: ...
    def security_hotspots(self, product: str, branch: str) -> int: ...
    def has_branch_coverage(self, metric_source_id: str) -> bool: ...
    def statement_coverage(self, metric_source_id: str) -> float: ...
    def branch_coverage(self, metric_source_id: str) -> float: ...
    def metric_source_urls(self, *metric_source_ids: str) -> List[str]: ...
    def version(self, product: str, branch: str) -> str: ...
    def plugin_version(self, plugin: str) -> str: ...
    def plugins_url(self) -> str: ...
    def default_quality_profile(self, language: str) -> str: ...
    def quality_profiles_url(self) -> str: ...
    def is_branch_plugin_installed(self) -> bool: ...
    def is_component_absent(self, product: str) -> bool: ...
    def ncloc(self, product: str, branch: str) -> int: ...
    def lines(self, product: str, branch: str) -> int: ...
    def major_violations(self, product: str, branch: str) -> int: ...
    def critical_violations(self, product: str, branch: str) -> int: ...
    def blocker_violations(self, product: str, branch: str) -> int: ...
    def duplicated_lines(self, product: str, branch: str) -> int: ...
    def unittest_line_coverage(self, product: str, branch: str) -> float: ...
    def unittest_branch_coverage(self, product: str, branch: str) -> float: ...
    def unittests(self, product: str, branch: str) -> int: ...
    def failing_unittests(self, product: str, branch: str) -> int: ...
    def methods(self, product: str, branch: str) -> int: ...
    def dashboard_url(self, product: str, branch: str) -> str: ...
    def complex_methods(self, product: str, branch: str) -> int: ...
    def long_methods(self, product: str, branch: str) -> int: ...
    def many_parameters_methods(self, product: str, branch: str) -> int: ...
    def commented_loc(self, product: str, branch: str) -> int: ...
    def suppressions(self, product: str, branch: str) -> int: ...
    def suppressions_url(self, product: str, branch: str) -> str: ...
    def violations_url(self, product: str, branch: str) -> str: ...
    def false_positives(self, product: str, branch: str) -> int: ...
    def false_positives_url(self, product: str, branch: str) -> str: ...
    def wont_fix(self, product: str, branch: str) -> int: ...
    def wont_fix_url(self, product: str, branch: str) -> str: ...
    def datetime(self, *products: str) -> DateTime: ...
    def _has_project(self, project: str, branch) -> bool: ...
    @classmethod
    def _add_branch_param_to_url(cls, url: str, branch: str) -> str: ...
    def _get_json(self, url: str, *args, **kwargs) -> \
            Union[Dict[str, Dict], List[Dict[str, Union[str, List[Dict[str, str]]]]]]: ...

class Sonar7(Sonar6):
    metric_source_name: str = ...
    def is_branch_name_included(self, product: str) -> bool: ...
    def version(self, product: str, branch: str) -> str: ...
    def datetime(self, *products: str) -> DateTime: ...
    def many_parameters_methods(self, product: str, branch: str) -> int: ...
    def long_methods(self, product: str, branch: str) -> int: ...
    def complex_methods(self, product: str, branch: str) -> int: ...
    def commented_loc(self, product: str, branch: str) -> int: ...
    def suppressions(self, product: str, branch: str) -> int: ...
    def default_quality_profile(self, language: str) -> str: ...
