# Stubs for hqlib.metric_source.abstract.issue_tracker (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ... import domain
from typing import List, Optional, Tuple

class BugTracker(domain.MetricSource):
    metric_source_name: str = ...
    def nr_issues(self, *metric_source_ids: str) -> Tuple[int, Optional[List[str]]]: ...

class SecurityBugTracker(BugTracker):
    metric_source_name: str = ...
    def nr_issues(self, *metric_source_ids: str) -> Tuple[int, Optional[List[str]]]: ...

class StaticSecurityBugTracker(BugTracker):
    metric_source_name: str = ...
    def nr_issues(self, *metric_source_ids: str) -> Tuple[int, Optional[List[str]]]: ...

class FindingTracker(BugTracker):
    metric_source_name: str = ...
    def nr_issues(self, *metric_source_ids: str) -> Tuple[int, Optional[List[str]]]: ...

class TechnicalDebtTracker(BugTracker):
    metric_source_name: str = ...
    def nr_issues(self, *metric_source_ids: str) -> Tuple[int, Optional[List[str]]]: ...

class QualityGateTracker(BugTracker):
    metric_source_name: str = ...
    def nr_issues(self, *metric_source_ids: str) -> Tuple[int, Optional[List[str]]]: ...

class UserStoryWithoutSecurityRiskAssessmentTracker(domain.MetricSource):
    metric_source_name: str = ...
    def nr_issues(self, *metric_source_ids: str) -> Tuple[int, Optional[List[str]]]: ...

class UserStoryWithoutPerformanceRiskAssessmentTracker(domain.MetricSource):
    metric_source_name: str = ...
    def nr_issues(self, *metric_source_ids: str) -> Tuple[int, Optional[List[str]]]: ...

class UserStoriesInProgressTracker(domain.MetricSource):
    metric_source_name: str = ...
    def nr_issues(self, *metric_source_ids: str) -> Tuple[float, Optional[List[str]]]: ...

class UserStoriesDurationTracker(domain.MetricSource):
    metric_source_name: str = ...
    needs_metric_source_id: bool = ...
    def cumulative_stories_duration(self, *metric_source_ids: str) -> Tuple[float, Optional[List[str]]]: ...

class ReadyUserStoryPointsTracker(domain.MetricSource):
    metric_source_name: str = ...
    def nr_points(self, *metric_source_ids: str) -> Tuple[float, Optional[List[str]]]: ...

class ManualLogicalTestCaseTracker(domain.MetricSource):
    metric_source_name: str = ...
    def nr_issues(self, *metric_source_ids: str) -> Tuple[int, Optional[List[str]]]: ...
    def nr_manual_test_cases_not_measured(self, *metric_source_ids: str) -> Tuple[int, Optional[List[str]]]: ...
    def manual_logical_test_cases_duration(self, *metric_source_ids: str) -> Tuple[float, Optional[List[str]]]: ...
